<project name="Tiny Media Manager">

	<!-- build directories -->
	<property name="build.dir" value="target/ant" />
	<property name="lib.dir" value="${build.dir}/lib" />
	<property name="dist.dir" value="dist" />

	<!-- set as property to override in jenkins -->
	<property name="getdown" value="getdown.txt" />

	<path id="classpath.default">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>

	<target name="setNightly" if="nightly">
		<property name="rev" value="nightly" />
	</target>
	<target name="setPreRelease" if="prerelease">
		<property name="rev" value="prerelease" />
	</target>

	<target name="downloadLocale">
		<get src="https://www.transifex.com/api/2/project/tinymediamanager/resource/messagesproperties/translation/${lang}/?file" dest="locale/messages_${lang}.properties" username="tmm" password="tmm" ignoreerrors="true" />
	</target>

	<target name="downloadLocales">
		<antcall target="downloadLocale">
			<param name="lang" value="cs" />
		</antcall>
		<!--<antcall target="downloadLocale"><param name="lang" value="da"/></antcall>-->
		<antcall target="downloadLocale">
			<param name="lang" value="de" />
		</antcall>
		<antcall target="downloadLocale">
			<param name="lang" value="es" />
		</antcall>
		<antcall target="downloadLocale">
			<param name="lang" value="el" />
		</antcall>
		<antcall target="downloadLocale">
			<param name="lang" value="fr" />
		</antcall>
		<antcall target="downloadLocale">
			<param name="lang" value="hu" />
		</antcall>
		<antcall target="downloadLocale">
			<param name="lang" value="it" />
		</antcall>
		<antcall target="downloadLocale">
			<param name="lang" value="ko" />
		</antcall>
		<antcall target="downloadLocale">
			<param name="lang" value="nl" />
		</antcall>
		<antcall target="downloadLocale">
			<param name="lang" value="no" />
		</antcall>
		<!--<antcall target="downloadLocale"><param name="lang" value="pl"/></antcall>-->
		<antcall target="downloadLocale">
			<param name="lang" value="pt" />
		</antcall>
		<antcall target="downloadLocale">
			<param name="lang" value="ru" />
		</antcall>
		<!--<antcall target="downloadLocale"><param name="lang" value="ro"/></antcall>-->
		<antcall target="downloadLocale">
			<param name="lang" value="sk" />
		</antcall>
		<antcall target="downloadLocale">
			<param name="lang" value="sv" />
		</antcall>
		<antcall target="downloadLocale">
			<param name="lang" value="tr" />
		</antcall>
		<!--<antcall target="downloadLocale"><param name="lang" value="vi" /></antcall>-->
		<antcall target="downloadLocale">
			<param name="lang" value="zh" />
		</antcall>
	</target>

	<target name="package-app" description="builds the packages" depends="setNightly, setPreRelease, downloadLocales">
		<mkdir dir="${build.dir}" />

		<!-- set SVN revision here - is not set anymore since nightly/prerel -->
		<!-- Only works, if rev is not set to nightly/prerel - so should be fine for release build -->
		<echo message="Rev: ${rev}" />
		<property name="rev" value="${tmmRevision}" />
		<echo message="Rev: ${rev}" />

		<!-- buildinfo -->
		<propertyfile file="${build.dir}/version" comment="This file is automatically generated - DO NOT EDIT">
			<entry key="version" value="${version}" />
			<entry key="build" value="${rev}" />
			<entry key="date" value="${tmmTimestamp}" />
		</propertyfile>


		<!-- default files, to include in dist -->
		<copy file="objectdb.conf" todir="${build.dir}" />
		<copy file="changelog.txt" todir="${build.dir}" />
		<copy file="AppBundler/getdown.jar" todir="${build.dir}" />
		<copy file="AppBundler/${getdown}" tofile="${build.dir}/getdown.txt" />
		<copy todir="${build.dir}/native">
			<fileset dir="native" />
		</copy>
		<copy todir="${build.dir}/templates">
			<fileset dir="templates" />
		</copy>
		<copy todir="${build.dir}/locale">
			<fileset dir="locale" />
		</copy>
		<copy todir="${build.dir}/lib">
			<fileset dir="target/dependency" />
		</copy>

		<pathconvert property="gd.code" refid="classpath.default" pathsep="">
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<!-- remove absolute path -->
					<!-- add GD + lib/ prefix + newline ;) -->
					<globmapper from="*" to="code = lib/*${line.separator}" />
				</chainedmapper>
			</mapper>
		</pathconvert>
		<!--echo message="${gd.code}" /-->
		<replace file="${build.dir}/getdown.txt" token="%CODELIBS%" value="${gd.code}" />

		<copy file="AppBundler/launch.jnlp" tofile="${build.dir}/launch.jnlp" />
		<pathconvert property="webstart" refid="classpath.default" pathsep="">
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="*" to="        &lt;jar href=&quot;lib/*&quot; />${line.separator}" />
				</chainedmapper>
			</mapper>
		</pathconvert>
		<!-- echo message="${gd.code}" /-->
		<replace file="${build.dir}/launch.jnlp" token="%WEBSTARTLIBS%" value="${webstart}" />

		<pathconvert property="gd.locale" pathsep="">
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="*" to="resource = locale/*${line.separator}" />
				</chainedmapper>
			</mapper>
			<path>
				<fileset dir="locale">
					<include name="**/*.properties" />
				</fileset>
			</path>
		</pathconvert>
		<!-- echo message="${gd.locale}" /-->
		<replace file="${build.dir}/getdown.txt" token="%LOCALES%" value="${gd.locale}" />

		<copy file="AppBundler/LICENSE" todir="${build.dir}" />
		<copy file="AppBundler/splashscreen.png" todir="${build.dir}" />
		<copy file="AppBundler/tmm.png" todir="${build.dir}" />
		<copy file="AppBundler/env.txt" todir="${build.dir}" />
		<!-- copy TMM itself -->
		<copy file="target/${tmmName}-${tmmVersion}.jar" tofile="${build.dir}/tmm.jar" />

		<!-- Mac OSX -->
		<mkdir dir="${dist.dir}/mac/tinyMediaManager.app/Contents/MacOS" />
		<mkdir dir="${dist.dir}/mac/tinyMediaManager.app/Contents/Resources/Java" />
		<copy file="AppBundler/osx/Info.plist.template" tofile="${dist.dir}/mac/tinyMediaManager.app/Contents/Info.plist" />
		<replace file="${dist.dir}/mac/tinyMediaManager.app/Contents/Info.plist" token="%VERSION%" value="${tmmVersion}" />
		<replace file="${dist.dir}/mac/tinyMediaManager.app/Contents/Info.plist" token="%SVNREV%" value="${tmmRevision}" />
		<copy file="AppBundler/osx/PkgInfo" tofile="${dist.dir}/mac/tinyMediaManager.app/Contents/PkgInfo" />
		<copy file="AppBundler/osx/tmm.icns" tofile="${dist.dir}/mac/tinyMediaManager.app/Contents/Resources/tmm.icns" />
		<copy todir="${dist.dir}/mac/tinyMediaManager.app/Contents/Resources/Java/">
			<fileset dir="${build.dir}">
				<include name="**/*" />
				<exclude name="native/windows*/**" />
				<exclude name="native/linux*/**" />
			</fileset>
		</copy>

		<copy file="AppBundler/JavaApplicationStub.new" tofile="${dist.dir}/mac/tinyMediaManager.app/Contents/MacOS/JavaApplicationStub" />
		<chmod file="${dist.dir}/mac/tinyMediaManager.app/Contents/MacOS/JavaApplicationStub" perm="ugo+rx" />
		<copy file="AppBundler/tinyMediaManagerOSX.sh" tofile="${dist.dir}/mac/tinyMediaManager.app/Contents/Resources/Java/tinyMediaManagerOSX.sh" />
		<chmod file="${dist.dir}/mac/tinyMediaManager.app/Contents/Resources/Java/tinyMediaManagerOSX.sh" perm="ugo+rx" />

		<!-- Windows -->
		<taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpath="AppBundler/launch4j/launch4j.jar:AppBundler/launch4j/lib/xstream.jar" />
		<launch4j configFile="./AppBundler/launch4j.xml" txtProductVersion="${tmmVersion}_r${tmmRevision}" outfile="${dist.dir}/tinyMediaManager.exe" />
		<launch4j configFile="./AppBundler/launch4jUpdater.xml" txtProductVersion="${tmmVersion}_r${tmmRevision}" outfile="${dist.dir}/tinyMediaManagerUpd.exe" />
		<launch4j configFile="./AppBundler/launch4jcmd.xml" txtProductVersion="${tmmVersion}_r${tmmRevision}" outfile="${dist.dir}/tinyMediaManagerCMD.exe" />

		<!-- Linux -->
		<copy file="AppBundler/tinyMediaManager.sh" todir="${dist.dir}" />
		<copy file="AppBundler/tinyMediaManagerUpdater.sh" todir="${dist.dir}" />
		<copy file="AppBundler/tinyMediaManagerCMD.sh" todir="${dist.dir}" />
		<chmod file="${dist.dir}/tinyMediaManager.sh" perm="ugo+rx" />
		<chmod file="${dist.dir}/tinyMediaManagerUpdater.sh" perm="ugo+rx" />
		<chmod file="${dist.dir}/tinyMediaManagerCMD.sh" perm="ugo+rx" />


		<!-- default files, NOT to include in dist, but in getdown updater -->
		<copy file="${dist.dir}/tinyMediaManager.exe" tofile="${build.dir}/tinyMediaManager.new" />
		<copy file="${dist.dir}/tinyMediaManagerUpd.exe" tofile="${build.dir}/tinyMediaManagerUpd.new" />
		<copy file="${dist.dir}/tinyMediaManagerCMD.exe" tofile="${build.dir}/tinyMediaManagerCMD.new" />
		<copy file="${dist.dir}/tinyMediaManager.sh" tofile="${build.dir}/tinyMediaManager.sh" />
		<copy file="${dist.dir}/tinyMediaManagerUpdater.sh" tofile="${build.dir}/tinyMediaManagerUpdater.sh" />
		<copy file="${dist.dir}/tinyMediaManagerCMD.sh" tofile="${build.dir}/tinyMediaManagerCMD.sh" />
		<copy file="AppBundler/tinyMediaManagerOSX.sh" tofile="${build.dir}/tinyMediaManagerOSX.sh" />
		<copy file="AppBundler/JavaApplicationStub.new" tofile="${build.dir}/JavaApplicationStub.new" />
		<copy file="${dist.dir}/mac/tinyMediaManager.app/Contents/Info.plist" tofile="${build.dir}/Info.plist" />
		<copy file="AppBundler/getdown.jar" tofile="${build.dir}/getdown-new.jar" />

		<!-- finally create checksums -->
		<taskdef name="digest" classname="com.threerings.getdown.tools.DigesterTask" classpath="AppBundler/getdown.jar" />
		<digest appdir="${build.dir}" />

		<!-- copy digest.txt and create zip files -->
		<copy file="${build.dir}/digest.txt" todir="${dist.dir}/mac/tinyMediaManager.app/Contents/Resources/Java/" />
		<zip destfile="${dist.dir}/tmm_${tmmVersion}_r${tmmRevision}_mac.zip" level="9">
			<zipfileset dir="${dist.dir}/mac" excludes="**/JavaApplicationStub,**/tinyMediaManagerOSX.sh" />
			<zipfileset filemode="755" dir="${dist.dir}/mac" includes="**/JavaApplicationStub,**/tinyMediaManagerOSX.sh" />
		</zip>

		<!-- windows -->
		<copy file="${build.dir}/digest.txt" todir="${dist.dir}" />
		<zip destfile="${dist.dir}/tmm_${tmmVersion}_r${tmmRevision}_win.zip" level="9">
			<zipfileset filemode="755" dir="${build.dir}" excludes="env.txt, native/linux*/**, native/mac*/**" />
			<zipfileset filemode="755" dir="${dist.dir}" includes="*.exe" />
		</zip>

		<!-- linux -->
		<tar compression="gzip" destfile="${dist.dir}/tmm_${tmmVersion}_r${tmmRevision}_linux.tar.gz">
			<tarfileset dir="${build.dir}" excludes="env.txt, native/windows*/**, native/mac*/**" />
			<tarfileset filemode="755" dir="${dist.dir}" includes="*.sh" />
		</tar>


		<!-- create a whole archive of /build for transfer to mirrors -->
		<tar compression="gzip" destfile="${build.dir}/build.tar.gz">
			<tarfileset dir="${build.dir}" />
			<tarfileset filemode="755" dir="${build.dir}" includes="JavaApplicationStub" />
			<tarfileset filemode="755" dir="${build.dir}" includes="*.exe" />
			<tarfileset filemode="755" dir="${build.dir}" includes="*.sh" />
		</tar>

		<!-- done, move build dir -->
		<delete dir="build" />
		<move file="${build.dir}" tofile="build" />

		<!-- cleanup dist -->
		<delete includeemptydirs="true">
			<fileset dir="${dist.dir}" includes="**/*" excludes="*.zip,*.tar.gz" />
			<dirset dir="${dist.dir}" includes="**/*" />
		</delete>
	</target>

</project>